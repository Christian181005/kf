Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport datetime\r\nimport qrcode\r\nfrom io import BytesIO\r\n\r\n# -------------------------------\r\n# Testdaten erzeugen und speichern\r\n# -------------------------------\r\ndef create_test_data():\r\n    # Testdaten für Stundenplandaten aus Untis\r\n    timetable_data = {\r\n        'Klasse': ['10A', '10B', 'Abschluss 11', '10A'],\r\n        'Datum': ['2024-05-10', '2024-05-10', '2024-05-10', '2024-05-11'],\r\n        'Uhrzeit': ['08:00', '09:00', '10:00', '11:00'],\r\n        'Lehrkraft': ['Herr Müller', 'Frau Schmidt', 'Herr Meier', 'Frau Schulze'],\r\n        'Raum_Klasse': ['Raum 101', 'Raum 102', 'Raum 103', 'Raum 101'],\r\n        'Raum_KV': ['Raum 201', 'Raum 202', 'Raum 203', 'Raum 201'],\r\n        'Benachrichtigung': ['ja', 'ja', 'nein', 'ja']\r\n    }\r\n    timetable_df = pd.DataFrame(timetable_data)\r\n    timetable_file = 'timetable.csv'\r\n    timetable_df.to_csv(timetable_file, index=False, sep=';')\r\n    print(f\"Testdaten für Stundenplan wurden als {timetable_file} gespeichert.\")\r\n\r\n    # Testdaten für Lehrkräfte- und Verantwortlichkeitsliste\r\n    teacher_data = {\r\n        'Name': ['Herr Müller', 'Frau Schmidt', 'Herr Meier', 'Frau Schulze', 'Herr Becker'],\r\n        'Rolle': ['KV', 'Lehrer', 'WL', 'KV', 'Lehrer']\r\n    }\r\n    teacher_df = pd.DataFrame(teacher_data)\r\n    teacher_file = 'teacher_info.csv'\r\n    teacher_df.to_csv(teacher_file, index=False, sep=';')\r\n    print(f\"Testdaten für Lehrkräfte wurden als {teacher_file} gespeichert.\")\r\n\r\n# -------------------------------\r\n# Funktionen zur Terminplanung\r\n# -------------------------------\r\ndef load_data(timetable_file, teacher_file):\r\n    timetable_df = pd.read_csv(timetable_file, delimiter=';')\r\n    teacher_df = pd.read_csv(teacher_file, delimiter=';')\r\n    return timetable_df, teacher_df\r\n\r\ndef is_preferred_teacher(lehrkraft, teacher_df):\r\n    preferred_roles = ['KV', 'WL']\r\n    return not teacher_df[(teacher_df['Name'] == lehrkraft) & (teacher_df['Rolle'].isin(preferred_roles))].empty\r\n\r\ndef calculate_photo_time(row, duration_minutes=10):\r\n    lesson_time = datetime.datetime.strptime(row['Uhrzeit'], '%H:%M')\r\n    if row['preferred']:\r\n        photo_time = lesson_time\r\n    else:\r\n        photo_time = lesson_time + datetime.timedelta(minutes=5)\r\n    if 'Abschluss' in row['Klasse']:\r\n        duration_minutes = 15\r\n    return photo_time.strftime('%H:%M'), duration_minutes\r\n\r\ndef schedule_class_photos(timetable_df, teacher_df):\r\n    timetable_df['preferred'] = timetable_df['Lehrkraft'].apply(lambda x: is_preferred_teacher(x, teacher_df))\r\n    schedule = []\r\n    for index, row in timetable_df.iterrows():\r\n        photo_time, duration = calculate_photo_time(row)\r\n        entry = {\r\n            'Klasse': row['Klasse'],\r\n            'Datum': row['Datum'],\r\n            'Fototermin': photo_time,\r\n            'Dauer (Min.)': duration,\r\n            'Raum': row['Raum_Klasse'],\r\n            'Lehrkraft': row['Lehrkraft'],\r\n            'Priorität': '1' if row['preferred'] else '2'\r\n        }\r\n        schedule.append(entry)\r\n    schedule_df = pd.DataFrame(schedule)\r\n    return schedule_df\r\n\r\ndef generate_email_text(schedule_df):\r\n    email_text = (\"Liebe Kolleginnen und Kollegen,\\n\\n\"\r\n                  \"anbei erhalten Sie die Terminliste für die anstehenden Klassenfotos.\\n\"\r\n                  \"Bitte beachten Sie die folgenden Hinweise:\\n\"\r\n                  \"- Termin: Datum, Uhrzeit und Raum laut angehängter Liste\\n\"\r\n                  \"- Bei Rückfragen wenden Sie sich bitte an die Verwaltung.\\n\\n\"\r\n                  \"Viele Grüße\\nIhr Fototeam\\n\\n\"\r\n                  \"Terminübersicht:\\n\")\r\n    for _, row in schedule_df.iterrows():\r\n        email_text += (f\"{row['Datum']} - Klasse {row['Klasse']} um {row['Fototermin']} in Raum {row['Raum']} \"\r\n                       f\"(Priorität: {row['Priorität']})\\n\")\r\n    return email_text\r\n\r\ndef generate_qr_code(data, filename='qr_bestellung.png'):\r\n    qr = qrcode.QRCode(version=1, box_size=10, border=5)\r\n    qr.add_data(data)\r\n    qr.make(fit=True)\r\n    img = qr.make_image(fill='black', back_color='white')\r\n    img.save(filename)\r\n    print(f\"QR-Code gespeichert als {filename}\")\r\n\r\n# -------------------------------\r\n# Hauptfunktion\r\n# -------------------------------\r\ndef main():\r\n    # Erstelle Testdaten\r\n    create_test_data()\r\n    \r\n    # Dateinamen der Testdaten\r\n    timetable_file = 'timetable.csv'\r\n    teacher_file = 'teacher_info.csv'\r\n    \r\n    # Daten laden\r\n    timetable_df, teacher_df = load_data(timetable_file, teacher_file)\r\n    \r\n    # Terminplanung durchführen\r\n    schedule_df = schedule_class_photos(timetable_df, teacher_df)\r\n    \r\n    # Speichern der finalen Terminliste als CSV\r\n    output_csv = 'einteilung_fotos_final.csv'\r\n    schedule_df.to_csv(output_csv, index=False, sep=';')\r\n    print(f\"Terminliste wurde als {output_csv} gespeichert.\")\r\n    \r\n    # E-Mail Text generieren und speichern\r\n    email_text = generate_email_text(schedule_df)\r\n    with open('email_text.txt', 'w', encoding='utf-8') as f:\r\n        f.write(email_text)\r\n    print(\"E-Mail Text wurde als email_text.txt gespeichert.\")\r\n    \r\n    # QR-Code generieren (Beispiel-Daten)\r\n    bestell_data = \"Bestellung Klassenfoto, Termin: siehe Anhang, Klasse: Beispielklasse, KV: Mustermann\"\r\n    generate_qr_code(bestell_data)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	(revision 79cef0ef7a1f571628f4423cf1109ea67cda5dc4)
+++ b/test.py	(date 1742466701091)
@@ -1,4 +1,4 @@
-import pandas as pd
+import  pandas as pd
 import datetime
 import qrcode
 from io import BytesIO
